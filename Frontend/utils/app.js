import { ethers } from "ethers";
import { Database, helpers } from "@tableland/sdk";
import { routerABI } from "./RouterABI";
import { formABI } from "./formABI";

require("dotenv").config();

const bytecode = "60806040523480156200001157600080fd5b50604051620027463803806200274683398181016040528101906200003791906200012a565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015c565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f282620000c5565b9050919050565b6200010481620000e5565b81146200011057600080fd5b50565b6000815190506200012481620000f9565b92915050565b600060208284031215620001435762000142620000c0565b5b6000620001538482850162000113565b91505092915050565b6125da806200016c6000396000f3fe60806040526004361061007b5760003560e01c806381909ebb1161004e57806381909ebb146101405780638da5cb5b1461015c578063ae8d233214610187578063dee4571b146101b05761007b565b8063150b7a0214610080578063195e251f146100bd57806339987448146100fb57806356004b6a14610117575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190611565565b6101ed565b6040516100b49190611623565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df919061163e565b610201565b6040516100f29291906116ea565b60405180910390f35b610115600480360381019061011091906118a8565b610351565b005b34801561012357600080fd5b5061013e60048036038101906101399190611904565b6108c5565b005b61015a600480360381019061015591906119ab565b610b41565b005b34801561016857600080fd5b50610171610bd5565b60405161017e91906119fa565b60405180910390f35b34801561019357600080fd5b506101ae60048036038101906101a99190611a15565b610bfb565b005b3480156101bc57600080fd5b506101d760048036038101906101d2919061163e565b610d67565b6040516101e49190611a8b565b60405180910390f35b600063150b7a0260e01b9050949350505050565b606080600360008481526020019081526020016000206001016003600085815260200190815260200160002060030181805461023c90611ad5565b80601f016020809104026020016040519081016040528092919081815260200182805461026890611ad5565b80156102b55780601f1061028a576101008083540402835291602001916102b5565b820191906000526020600020905b81548152906001019060200180831161029857829003601f168201915b505050505091508080546102c890611ad5565b80601f01602080910402602001604051908101604052809291908181526020018280546102f490611ad5565b80156103415780601f1061031657610100808354040283529160200191610341565b820191906000526020600020905b81548152906001019060200180831161032457829003601f168201915b5050505050905091509150915091565b600061043e60046000858152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b828210156104355783829060005260206000200180546103a890611ad5565b80601f01602080910402602001604051908101604052809291908181526020018280546103d490611ad5565b80156104215780601f106103f657610100808354040283529160200191610421565b820191906000526020600020905b81548152906001019060200180831161040457829003601f168201915b505050505081526020019060010190610389565b50505050610d87565b9050600061044b83610d87565b9050610455610e57565b73ffffffffffffffffffffffffffffffffffffffff1663377af0da306003600088815260200190815260200160002060000154610548600360008a815260200190815260200160002060010180546104ac90611ad5565b80601f01602080910402602001604051908101604052809291908181526020018280546104d890611ad5565b80156105255780601f106104fa57610100808354040283529160200191610525565b820191906000526020600020905b81548152906001019060200180831161050857829003601f168201915b5050505050600360008b8152602001908152602001600020600001548888611056565b6040518463ffffffff1660e01b815260040161056693929190611b06565b600060405180830381600087803b15801561058057600080fd5b505af1158015610594573d6000803e3d6000fd5b50505050600560008581526020019081526020016000206001015447101580156105ea57506005600085815260200190815260200160002060010154600560008681526020019081526020016000206000015410155b156106b6576000803373ffffffffffffffffffffffffffffffffffffffff16600560008881526020019081526020016000206001015460405161062c90611b75565b60006040518083038185875af1925050503d8060008114610669576040519150601f19603f3d011682016040523d82523d6000602084013e61066e565b606091505b5091509150816106b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106aa90611bd6565b60405180910390fd5b50505b60056000858152602001908152602001600020600101546005600086815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161073c91906119fa565b602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d9190611c0b565b101580156107b757506005600085815260200190815260200160002060010154600560008681526020019081526020016000206000015410155b15610888576005600085815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3360056000888152602001908152602001600020600101546040518363ffffffff1660e01b8152600401610843929190611c38565b6020604051808303816000875af1158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190611c99565b505b6001600360006108986000611095565b815260200190815260200160002060040160008282546108b89190611cf5565b9250508190555050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461091f57600080fd5b6000610929610e57565b73ffffffffffffffffffffffffffffffffffffffff1663a15ab08d3061094f86886110a3565b6040518363ffffffff1660e01b815260040161096c929190611d29565b6020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190611c0b565b90506000846109bd466110d9565b6109c6846110d9565b6040516020016109d893929190611dbb565b604051602081830303815290604052905082600360006109f86000611095565b81526020019081526020016000206003019081610a159190611fb6565b508460036000610a256000611095565b81526020019081526020016000206001019081610a429190611fb6565b508160036000610a526000611095565b8152602001908152602001600020600001819055508060036000610a766000611095565b81526020019081526020016000206002019081610a939190611fb6565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633db88432338330610adf6000611095565b6040518563ffffffff1660e01b8152600401610afe9493929190612088565b600060405180830381600087803b158015610b1857600080fd5b505af1158015610b2c573d6000803e3d6000fd5b50505050610b3a60006111a7565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b9b57600080fd5b3460056000848152602001908152602001600020600001819055508060056000848152602001908152602001600020600101819055505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c5557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610c92939291906120d4565b6020604051808303816000875af1158015610cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd59190611c99565b50826005600086815260200190815260200160002060000181905550816005600086815260200190815260200160002060010181905550806005600086815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600060036000838152602001908152602001600020600401549050919050565b606080606060005b8451811015610e415760018551610da6919061210b565b8103610def5782858281518110610dc057610dbf61213f565b5b6020026020010151604051602001610dd992919061216e565b6040516020818303038152906040529150610e2e565b82858281518110610e0357610e0261213f565b5b6020026020010151604051602001610e1c9291906121b8565b60405160208183030381529060405291505b8080610e39906121eb565b915050610d8f565b50610e4b816111bd565b91508192505050919050565b600060014603610e7d5773012969f7e3439a9b04025b5a049eb9bad82a8c129050611053565b600a4603610ea15773fad44bf5b843de943a09d4f3e84949a11d3aa3e69050611053565b61a4b14603610ec657739abd75e8640871a5a20d3b4ee6330a04c962affd9050611053565b61a4ba4603610eeb57731a22854c5b1642760a827f20137a67930ae108d29050611053565b60894603610f0f57735c4e6a9e5c1e1bf445a062006faf19ea6c49afea9050611053565b61013a4603610f34577359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d9050611053565b62aa36a74603610f5a5773c50c62498448acc8dbde43da77f8d5d2e2c7597d9050611053565b6101a44603610f7f5773c72e8a7be04f2469f8c2db3f1bdf69a7d516abba9050611053565b62066eed4603610fa55773033f69e8d119205089ab15d340f5b797732f646b9050611053565b620138814603610fcb57734b48841d4b32c4650e4abc117a03fe8b51f38f689050611053565b6204cb2f4603610ff15773030bcf3d50cad04c2e57391b12740982a93086219050611053565b617a6946036110165773e7f1725e7734ce288f8367e1bb143e90bb3f05129050611053565b466040517f264e42cf00000000000000000000000000000000000000000000000000000000815260040161104a9190611a8b565b60405180910390fd5b90565b6060600061106486866111e6565b905080848460405160200161107b93929190612363565b604051602081830303815290604052915050949350505050565b600081600001549050919050565b6060816110af466110d9565b846040516020016110c293929190612458565b604051602081830303815290604052905092915050565b6060600060016110e884611224565b01905060008167ffffffffffffffff8111156111075761110661143a565b5b6040519080825280601f01601f1916602001820160405280156111395781602001600182028036833780820191505090505b509050600082602001820190505b60011561119c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816111905761118f6124b5565b5b04945060008503611147575b819350505050919050565b6001816000016000828254019250508190555050565b6060816040516020016111d09190612530565b6040516020818303038152906040529050919050565b6060826111f2466110d9565b6111fb846110d9565b60405160200161120d9392919061255d565b604051602081830303815290604052905092915050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611282577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611278576112776124b5565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106112bf576d04ee2d6d415b85acef810000000083816112b5576112b46124b5565b5b0492506020810190505b662386f26fc1000083106112ee57662386f26fc1000083816112e4576112e36124b5565b5b0492506010810190505b6305f5e1008310611317576305f5e100838161130d5761130c6124b5565b5b0492506008810190505b612710831061133c576127108381611332576113316124b5565b5b0492506004810190505b6064831061135f5760648381611355576113546124b5565b5b0492506002810190505b600a831061136e576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006113b68261138b565b9050919050565b6113c6816113ab565b81146113d157600080fd5b50565b6000813590506113e3816113bd565b92915050565b6000819050919050565b6113fc816113e9565b811461140757600080fd5b50565b600081359050611419816113f3565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61147282611429565b810181811067ffffffffffffffff821117156114915761149061143a565b5b80604052505050565b60006114a4611377565b90506114b08282611469565b919050565b600067ffffffffffffffff8211156114d0576114cf61143a565b5b6114d982611429565b9050602081019050919050565b82818337600083830152505050565b6000611508611503846114b5565b61149a565b90508281526020810184848401111561152457611523611424565b5b61152f8482856114e6565b509392505050565b600082601f83011261154c5761154b61141f565b5b813561155c8482602086016114f5565b91505092915050565b6000806000806080858703121561157f5761157e611381565b5b600061158d878288016113d4565b945050602061159e878288016113d4565b93505060406115af8782880161140a565b925050606085013567ffffffffffffffff8111156115d0576115cf611386565b5b6115dc87828801611537565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61161d816115e8565b82525050565b60006020820190506116386000830184611614565b92915050565b60006020828403121561165457611653611381565b5b60006116628482850161140a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156116a557808201518184015260208101905061168a565b60008484015250505050565b60006116bc8261166b565b6116c68185611676565b93506116d6818560208601611687565b6116df81611429565b840191505092915050565b6000604082019050818103600083015261170481856116b1565b9050818103602083015261171881846116b1565b90509392505050565b600067ffffffffffffffff82111561173c5761173b61143a565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561176d5761176c61143a565b5b61177682611429565b9050602081019050919050565b600061179661179184611752565b61149a565b9050828152602081018484840111156117b2576117b1611424565b5b6117bd8482856114e6565b509392505050565b600082601f8301126117da576117d961141f565b5b81356117ea848260208601611783565b91505092915050565b600061180661180184611721565b61149a565b905080838252602082019050602084028301858111156118295761182861174d565b5b835b8181101561187057803567ffffffffffffffff81111561184e5761184d61141f565b5b80860161185b89826117c5565b8552602085019450505060208101905061182b565b5050509392505050565b600082601f83011261188f5761188e61141f565b5b813561189f8482602086016117f3565b91505092915050565b600080604083850312156118bf576118be611381565b5b60006118cd8582860161140a565b925050602083013567ffffffffffffffff8111156118ee576118ed611386565b5b6118fa8582860161187a565b9150509250929050565b60008060006060848603121561191d5761191c611381565b5b600084013567ffffffffffffffff81111561193b5761193a611386565b5b611947868287016117c5565b935050602084013567ffffffffffffffff81111561196857611967611386565b5b611974868287016117c5565b925050604084013567ffffffffffffffff81111561199557611994611386565b5b6119a1868287016117c5565b9150509250925092565b600080604083850312156119c2576119c1611381565b5b60006119d08582860161140a565b92505060206119e18582860161140a565b9150509250929050565b6119f4816113ab565b82525050565b6000602082019050611a0f60008301846119eb565b92915050565b60008060008060808587031215611a2f57611a2e611381565b5b6000611a3d8782880161140a565b9450506020611a4e8782880161140a565b9350506040611a5f8782880161140a565b9250506060611a70878288016113d4565b91505092959194509250565b611a85816113e9565b82525050565b6000602082019050611aa06000830184611a7c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611aed57607f821691505b602082108103611b0057611aff611aa6565b5b50919050565b6000606082019050611b1b60008301866119eb565b611b286020830185611a7c565b8181036040830152611b3a81846116b1565b9050949350505050565b600081905092915050565b50565b6000611b5f600083611b44565b9150611b6a82611b4f565b600082019050919050565b6000611b8082611b52565b9150819050919050565b7f6661696c656420746f2073656e64206574686572000000000000000000000000600082015250565b6000611bc0601483611676565b9150611bcb82611b8a565b602082019050919050565b60006020820190508181036000830152611bef81611bb3565b9050919050565b600081519050611c05816113f3565b92915050565b600060208284031215611c2157611c20611381565b5b6000611c2f84828501611bf6565b91505092915050565b6000604082019050611c4d60008301856119eb565b611c5a6020830184611a7c565b9392505050565b60008115159050919050565b611c7681611c61565b8114611c8157600080fd5b50565b600081519050611c9381611c6d565b92915050565b600060208284031215611caf57611cae611381565b5b6000611cbd84828501611c84565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d00826113e9565b9150611d0b836113e9565b9250828201905080821115611d2357611d22611cc6565b5b92915050565b6000604082019050611d3e60008301856119eb565b8181036020830152611d5081846116b1565b90509392505050565b600081905092915050565b6000611d6f8261166b565b611d798185611d59565b9350611d89818560208601611687565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b6000611dc78286611d64565b9150611dd282611d95565b600182019150611de28285611d64565b9150611ded82611d95565b600182019150611dfd8284611d64565b9150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611e6c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611e2f565b611e768683611e2f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611eb3611eae611ea9846113e9565b611e8e565b6113e9565b9050919050565b6000819050919050565b611ecd83611e98565b611ee1611ed982611eba565b848454611e3c565b825550505050565b600090565b611ef6611ee9565b611f01818484611ec4565b505050565b5b81811015611f2557611f1a600082611eee565b600181019050611f07565b5050565b601f821115611f6a57611f3b81611e0a565b611f4484611e1f565b81016020851015611f53578190505b611f67611f5f85611e1f565b830182611f06565b50505b505050565b600082821c905092915050565b6000611f8d60001984600802611f6f565b1980831691505092915050565b6000611fa68383611f7c565b9150826002028217905092915050565b611fbf8261166b565b67ffffffffffffffff811115611fd857611fd761143a565b5b611fe28254611ad5565b611fed828285611f29565b600060209050601f831160018114612020576000841561200e578287015190505b6120188582611f9a565b865550612080565b601f19841661202e86611e0a565b60005b8281101561205657848901518255600182019150602085019450602081019050612031565b86831015612073578489015161206f601f891682611f7c565b8355505b6001600288020188555050505b505050505050565b600060808201905061209d60008301876119eb565b81810360208301526120af81866116b1565b90506120be60408301856119eb565b6120cb6060830184611a7c565b95945050505050565b60006060820190506120e960008301866119eb565b6120f660208301856119eb565b6121036040830184611a7c565b949350505050565b6000612116826113e9565b9150612121836113e9565b925082820390508181111561213957612138611cc6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061217a8285611d64565b91506121868284611d64565b91508190509392505050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b60006121c48285611d64565b91506121d08284611d64565b91506121db82612192565b6001820191508190509392505050565b60006121f6826113e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361222857612227611cc6565b5b600182019050919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000600082015250565b6000612269600c83611d59565b915061227482612233565b600c82019050919050565b7f2800000000000000000000000000000000000000000000000000000000000000600082015250565b60006122b5600183611d59565b91506122c08261227f565b600182019050919050565b7f2956414c55455328000000000000000000000000000000000000000000000000600082015250565b6000612301600883611d59565b915061230c826122cb565b600882019050919050565b7f2900000000000000000000000000000000000000000000000000000000000000600082015250565b600061234d600183611d59565b915061235882612317565b600182019050919050565b600061236e8261225c565b915061237a8286611d64565b9150612385826122a8565b91506123918285611d64565b915061239c826122f4565b91506123a88284611d64565b91506123b382612340565b9150819050949350505050565b7f435245415445205441424c452000000000000000000000000000000000000000600082015250565b60006123f6600d83611d59565b9150612401826123c0565b600d82019050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000600082015250565b6000612442600183611d59565b915061244d8261240c565b600182019050919050565b6000612463826123e9565b915061246f8286611d64565b915061247a82612435565b91506124868285611d64565b9150612491826122a8565b915061249d8284611d64565b91506124a882612340565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f2700000000000000000000000000000000000000000000000000000000000000600082015250565b600061251a600183611d59565b9150612525826124e4565b600182019050919050565b600061253b8261250d565b91506125478284611d64565b91506125528261250d565b915081905092915050565b60006125698286611d64565b915061257482612435565b91506125808285611d64565b915061258b82612435565b91506125978284611d64565b915081905094935050505056fea264697066735822122083546e4ff36ff70422a404196fd355a09730b98e0de72a207e05510e4604ae5364736f6c63430008120033"; // update bytecode

// Connect to the database
const db = new Database();

var provider;
var signer;

const routerContractAddress = "0x2be4a5854dffa9B0C41b4E38BA6a5B3bad103504";

export const connectWallet = async () => {
    provider = new ethers.BrowserProvider(window.ethereum);
  
    await provider.send("eth_requestAccounts", []);
  
    signer = await provider.getSigner();
  
    console.log(signer);
}

export const getUser = () => {
    return [provider, signer]
}
export const getUserAddress = async () => {
    const address = await signer.address;
    return address;
}

function getInputs(questions, inputTypes) {
    const modifiedQuestions = questions.map((question, i) => {
        const modifiedQuestion = question.replace(/\s/g, '_');
        const inputType = inputTypes[i];
        return `${modifiedQuestion}(${inputType})`;
    });
  
    const modifiedInputTypes = inputTypes.map((inputType) => {
      // Change "file" to "text"
      return inputType === "file" ? "text" : inputType;
    });
  
    return [modifiedQuestions, modifiedInputTypes];
}

function concatCreationArray(fields, types) {
    if (fields.length !== types.length) {
      throw new Error('Fields and types arrays must have the same length');
    }
  
    let queryString = '';
  
    for (let i = 0; i < fields.length; i++) {
      if (i === 0) {
        queryString += `${fields[i]} ${types[i]} primary key,`;
      } else if (i === fields.length - 1) {
        queryString += `${fields[i]} ${types[i]}`;
      } else {
        queryString += `${fields[i]} ${types[i]},`;
      }
    }
  
    return queryString;
}

function concatWriteArray(fields) {
    let queryString = '';
    
    for (let i = 0; i < fields.length; i++) {
      if (i === fields.length - 1) {
        queryString += fields[i];
      } else {
        queryString += fields[i] + ',';
      }
    }
    
    return queryString;
  }  

const create = async (_questions, _inputTypes, name, details,  contractAddress) => { // add the fee and reward feature
    // getContract Address
    // const gasLimit = 300000;
    // const gasPriceInWei = ethers.parseUnits('25', 'gwei');
    const [questions, inputTypes] = getInputs(_questions, _inputTypes);
    // construct contract
    const formContract = new ethers.Contract(contractAddress, formABI, signer);
    // get create string
    const createString = concatCreationArray(questions, inputTypes);
    const writeString = concatWriteArray(questions);
    // call function to create table
    const tx = await formContract.createTable(name, createString, details, writeString);
    const receipt = await tx.wait();
    return(receipt);
}

const deploy = async () => {
    const ContractInstance = new ethers.ContractFactory(formABI, bytecode, signer);
    const contractInstance = await ContractInstance.deploy(routerContractAddress);

    const contractAddress = await contractInstance.getAddress();
    return contractAddress;
}

export const createForm = async (_questions, _inputTypes, name, details) => {
    const routerContract = new ethers.Contract(routerContractAddress, routerABI, signer);
    const userAddress = await getUserAddress();
    const _userAddress = userAddress.toString();
    const contractAddress = await routerContract.getContract(_userAddress); // update router contract with functions to set and get contractAddress for users update createTable function in formContract
    if (contractAddress == '0x0000000000000000000000000000000000000000') {
        const newContractAddress = await deploy();
        const receipt = await create(_questions, _inputTypes, name, details, newContractAddress);
        console.log(receipt);
    } else {
        const receipt = await create(_questions, _inputTypes, name, details, contractAddress);
        console.log(receipt);
    }
}

function findTable(array, targetTableName) {
    for (let i = 0; i < array.length; i++) {
      if (array[i].tableName === targetTableName) {
        return array[i];
      }
    }
    // If no matching object is found, return null or handle it as needed
    return null;
}

function getObjectParameters(array) {
if (array.length === 0) {
    return []; // Return an empty array if the input array is empty.
}

const keys = Object.keys(array[0]);

return keys;
}

function splitElements(array) {
    const result = [];
  
    array.forEach((element) => {
      element = element.replace(/_/g, ' ');

      const matches = element.match(/^(.*?)\((.*?)\)$/);
      if (matches && matches.length === 3) {
        const obj = {
            question: matches[1],
            inputType: matches[2]
        };
        result.push(obj);
      }
    });
    return result;
}

// create function to get a form
// get table contract and id using tableName(get TableName from search params)
// construct contract
// get questions and by types by separating the question from the '(inputType)' get them and concat to arrays then return them
export const getForm = async (tableName) => {
    const routerName = routerContract.getTable();
    const { _results } = await db.prepare(`SELECT * FROM ${routerName};`).all();
    const table = findTable(_results, tableName);
    const formContract = new ethers.Contract(table.tableContract, formABI, signer);
    const formInfo = formContract.getTable(table.tableId);
    const { results } = await db.prepare(`SELECT * FROM ${tableName} LIMIT 2;`).all();
    const _form = getObjectParameters(results);
    const form = splitElements(_form);
    console.log(form, formInfo);
    return [form, formInfo];
}

export const submitResponse = async (tableName, responses) => {
    const routerContract = new ethers.Contract(routerContractAddress, routerABI, signer);
    const routerName = routerContract.getTable();
    const { results } = await db.prepare(`SELECT * FROM ${routerName};`).all();
    const table = findTable(results, tableName);
    const formContract = new ethers.Contract(table.tableContract, formABI, signer);
    const tx = formContract.writeTable(table.tableId, responses)
    const receipt = await tx.wait();
    console.log(receipt);
}

const storeFiles = async (files) => {
  const client = new Web3Storage({ token: process.env.WEB3_STORAGE_KEY });
  const cid = await client.put(files);
  console.log("stored files with cid:", cid);
  return cid;
}

// create function to get responses from users
export const submitForm = async (array) => {
    const responses = [];
    // run through the array to check if the answer is a file
    for (const item of array) {
        let response;

        if (typeof item.answer === 'object' && item.answer instanceof File) {
            // If the answer is a file, store it on IPFS
            const cid = await storeFiles(item.answer);
            response = cid;
        } else if (typeof item.answer === 'number') {
            response = item.answer.toString();
        } else {
            response = item.answer;
        }
        responses.push(response);
    }
    return responses
}
